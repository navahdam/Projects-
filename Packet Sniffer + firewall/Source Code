# Network Packet Sniffer with Alert System and Firewall Integration
# ---------------------------------------------------------------
# This Python script is a real-time network traffic sniffer that
# captures, analyzes, and logs packets. It includes:
# - A GUI to manage firewall rules (IP, Port, Protocol based)
# - Logging of allowed and blocked packets
# - Real-time alert system for blocked traffic via system tray
#
# Technologies used: PyQt5 for GUI, Scapy for packet sniffing

import sys
import os
import json
import csv
import threading
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QHBoxLayout,
    QPushButton, QLineEdit, QTableWidget, QTableWidgetItem,
    QHeaderView, QMessageBox, QFileDialog, QSystemTrayIcon, QStyle
)
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QIcon
from scapy.all import sniff, IP, TCP, UDP, ICMP

# File paths for firewall rule storage and packet logs
FIREWALL_RULES_FILE = "firewall_rules.json"
BLOCKED_LOG_FILE = "blocked_packets.csv"
PACKET_LOG_FILE = "packet_log.csv"

# Sets to store current firewall rules in memory
blocked_ips = set()
blocked_ports = set()
blocked_protocols = set()

window = None  # Global GUI window reference

# Load rules from JSON file or set default rules

def load_firewall_rules():
    global blocked_ips, blocked_ports, blocked_protocols

    default_ips = {"192.168.1.10"}
    default_ports = {"22", "445"}
    default_protocols = {"ICMP"}

    if os.path.exists(FIREWALL_RULES_FILE):
        try:
            with open(FIREWALL_RULES_FILE, "r") as f:
                data = json.load(f)
                blocked_ips.update(data.get("ips", []))
                blocked_ports.update(data.get("ports", []))
                blocked_protocols.update(data.get("protocols", []))
        except Exception:
            pass

    if not (blocked_ips or blocked_ports or blocked_protocols):
        blocked_ips.update(default_ips)
        blocked_ports.update(default_ports)
        blocked_protocols.update(default_protocols)
        save_firewall_rules()

# Save rules to JSON file

def save_firewall_rules():
    rules = {
        "ips": list(blocked_ips),
        "ports": list(blocked_ports),
        "protocols": list(blocked_protocols)
    }
    with open(FIREWALL_RULES_FILE, "w") as f:
        json.dump(rules, f, indent=4)

# PyQt5 GUI class for rule management and alerts

class FirewallGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Firewall Rule Manager")
        self.setGeometry(200, 200, 600, 400)
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        self.table = QTableWidget(0, 3)
        self.table.setHorizontalHeaderLabels(["IP", "Port", "Protocol"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.layout.addWidget(self.table)

        form_layout = QHBoxLayout()
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("IP")
        self.port_input = QLineEdit()
        self.port_input.setPlaceholderText("Port")
        self.protocol_input = QLineEdit()
        self.protocol_input.setPlaceholderText("Protocol")
        form_layout.addWidget(self.ip_input)
        form_layout.addWidget(self.port_input)
        form_layout.addWidget(self.protocol_input)
        self.layout.addLayout(form_layout)

        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("Add Rule")
        self.add_btn.clicked.connect(self.add_rule)
        self.clear_btn = QPushButton("Clear All")
        self.clear_btn.clicked.connect(self.clear_rules)
        btn_layout.addWidget(self.add_btn)
        btn_layout.addWidget(self.clear_btn)
        self.layout.addLayout(btn_layout)

        # System tray icon for alerts
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(self.style().standardIcon(QStyle.SP_ComputerIcon))
        self.tray_icon.show()

        self.load_table()

    def load_table(self):
        self.table.setRowCount(0)
        for ip in blocked_ips:
            self.insert_row(ip, "", "")
        for port in blocked_ports:
            self.insert_row("", port, "")
        for proto in blocked_protocols:
            self.insert_row("", "", proto)

    def insert_row(self, ip, port, proto):
        row_pos = self.table.rowCount()
        self.table.insertRow(row_pos)
        self.table.setItem(row_pos, 0, QTableWidgetItem(ip))
        self.table.setItem(row_pos, 1, QTableWidgetItem(port))
        self.table.setItem(row_pos, 2, QTableWidgetItem(proto))

    def add_rule(self):
        ip = self.ip_input.text().strip()
        port = self.port_input.text().strip()
        proto = self.protocol_input.text().strip().upper()

        if not ip and not port and not proto:
            QMessageBox.warning(self, "Invalid Input", "Please enter at least one value.")
            return

        if ip: blocked_ips.add(ip)
        if port: blocked_ports.add(port)
        if proto: blocked_protocols.add(proto)

        save_firewall_rules()
        self.load_table()

        self.ip_input.clear()
        self.port_input.clear()
        self.protocol_input.clear()

    def clear_rules(self):
        reply = QMessageBox.question(self, 'Clear All?', 'Are you sure you want to clear all rules?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            blocked_ips.clear()
            blocked_ports.clear()
            blocked_protocols.clear()
            save_firewall_rules()
            self.load_table()

    def show_alert(self, message):
        # Show alert pop-up in system tray
        self.tray_icon.showMessage("Firewall Alert", message, QSystemTrayIcon.Warning)

# Packet sniffer callback function

def packet_callback(pkt):
    if IP in pkt:
        src_ip = pkt[IP].src
        dst_ip = pkt[IP].dst
        proto = pkt.proto
        proto_name = {1: "ICMP", 6: "TCP", 17: "UDP"}.get(proto, str(proto))
        dst_port = str(pkt[TCP].dport) if TCP in pkt else str(pkt[UDP].dport) if UDP in pkt else ""
        src_port = str(pkt[TCP].sport) if TCP in pkt else str(pkt[UDP].sport) if UDP in pkt else ""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        file_exists = os.path.exists(PACKET_LOG_FILE)
        with open(PACKET_LOG_FILE, mode='a', newline='') as packet_file:
            writer = csv.writer(packet_file)
            if not file_exists:
                writer.writerow(["Timestamp", "Source IP", "Source Port", "Destination IP", "Destination Port", "Protocol"])
            writer.writerow([timestamp, src_ip, src_port, dst_ip, dst_port, proto_name])

        # Check rule violation
        if (src_ip in blocked_ips or dst_port in blocked_ports or proto_name in blocked_protocols):
            blocked_exists = os.path.exists(BLOCKED_LOG_FILE)
            with open(BLOCKED_LOG_FILE, mode='a', newline='') as log_file:
                writer = csv.writer(log_file)
                if not blocked_exists:
                    writer.writerow(["Timestamp", "Source IP", "Destination Port", "Protocol"])
                writer.writerow([timestamp, src_ip, dst_port, proto_name])

            print(f"[BLOCKED] {src_ip} -> {dst_ip}:{dst_port} [{proto_name}]")

            if window:
                QTimer.singleShot(0, lambda: window.show_alert(f"Blocked: {src_ip} â†’ {dst_ip}:{dst_port} [{proto_name}]"))
        else:
            print(f"[ALLOWED] {src_ip}:{src_port} -> {dst_ip}:{dst_port} [{proto_name}]")

# Launch the sniffer in background

def start_sniffer():
    print("[INFO] Starting packet sniffer...")
    sniff(prn=packet_callback, store=0)

# Application entry point

if __name__ == "__main__":
    load_firewall_rules()

    sniffer_thread = threading.Thread(target=start_sniffer, daemon=True)
    sniffer_thread.start()

    app = QApplication(sys.argv)
    window = FirewallGUI()
    window.show()
    sys.exit(app.exec_())
