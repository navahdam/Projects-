# Import standard libraries for system functions, threading, JSON handling, and time
import sys
import os
import json
import threading
import queue
from datetime import datetime
from collections import Counter

# Import PyQt5 modules for GUI building
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTextEdit, QLineEdit, QFileDialog, QListWidget, QMessageBox
)
from PyQt5.QtGui import QTextCursor, QTextCharFormat, QColor
from PyQt5.QtCore import QTimer

# Import Scapy for network packet sniffing
from scapy.all import sniff, IP, TCP, UDP, ICMP

# Import Matplotlib for plotting graphs inside the GUI
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

# Initialize global queues and storage for packets
packet_queue = queue.Queue()              # Queue to handle packets between threads
saved_packets = []                        # Stores all seen packets with metadata

# Initialize firewall rule sets
blocked_ips = set()                       # Blocked source IPs
blocked_ports = set()                     # Blocked destination ports
blocked_protocols = set()                 # Blocked protocols (e.g., TCP, UDP)

# File to save/load firewall rules
FIREWALL_RULES_FILE = "firewall_rules.json"


# Load firewall rules from a JSON file into memory
def load_firewall_rules():
    global blocked_ips, blocked_ports, blocked_protocols
    if os.path.exists(FIREWALL_RULES_FILE):
        with open(FIREWALL_RULES_FILE, 'r') as f:
            data = json.load(f)
            blocked_ips = set(data.get("ips", []))
            blocked_ports = set(data.get("ports", []))
            blocked_protocols = set(data.get("protocols", []))
    else:
        save_firewall_rules()  # Create file if it doesn't exist


# Save current firewall rules to JSON
def save_firewall_rules():
    rules = {
        "ips": list(blocked_ips),
        "ports": list(blocked_ports),
        "protocols": list(blocked_protocols)
    }
    with open(FIREWALL_RULES_FILE, "w") as f:
        json.dump(rules, f, indent=4)


# Callback function called by Scapy for each packet sniffed
def packet_callback(pkt):
    if IP in pkt:
        src_ip = pkt[IP].src                       # Extract source IP
        dst_ip = pkt[IP].dst                       # Extract destination IP
        proto = pkt.proto                          # Get protocol number
        proto_name = {1: "ICMP", 6: "TCP", 17: "UDP"}.get(proto, str(proto))  # Human-readable name

        # Extract source and destination ports if available
        dst_port = str(pkt[TCP].dport) if TCP in pkt else str(pkt[UDP].dport) if UDP in pkt else ""
        src_port = str(pkt[TCP].sport) if TCP in pkt else str(pkt[UDP].sport) if UDP in pkt else ""

        timestamp = datetime.now().strftime("%H:%M:%S")  # Timestamp for packet
        blocked = (src_ip in blocked_ips or dst_port in blocked_ports or proto_name in blocked_protocols)  # Check rule match
        tag = "[Blocked]" if blocked else "[Allowed]"

        # Construct readable line for display
        line = f"{timestamp} {tag} {src_ip}:{src_port} -> {dst_ip}:{dst_port} | {proto_name} Packet on port {dst_port}"
        packet_queue.put((line, proto_name, blocked))  # Add to packet queue


# Start the packet sniffer on a background thread
def start_sniffer():
    sniff(prn=packet_callback, store=0)


# GUI window to manage firewall rules
class FirewallManager(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Firewall Rule Manager")
        self.setGeometry(100, 100, 400, 400)
        layout = QVBoxLayout()

        # Input fields for IP, port, and protocol
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("Block IP")

        self.port_input = QLineEdit()
        self.port_input.setPlaceholderText("Block Port")

        self.protocol_input = QLineEdit()
        self.protocol_input.setPlaceholderText("Block Protocol (TCP, UDP, ICMP)")

        # Buttons for rule actions
        add_btn = QPushButton("Add Rule")
        add_btn.clicked.connect(self.add_rule)

        delete_btn = QPushButton("Delete Selected Rule")
        delete_btn.clicked.connect(self.delete_rule)

        save_btn = QPushButton("Save Firewall Rules")
        save_btn.clicked.connect(self.manual_save_rules)

        # List showing current rules
        self.rule_list = QListWidget()
        self.load_rules_into_list()

        # Add all widgets to layout
        layout.addWidget(self.ip_input)
        layout.addWidget(self.port_input)
        layout.addWidget(self.protocol_input)
        layout.addWidget(add_btn)
        layout.addWidget(delete_btn)
        layout.addWidget(save_btn)
        layout.addWidget(self.rule_list)
        self.setLayout(layout)

    def load_rules_into_list(self):
        self.rule_list.clear()
        for ip in blocked_ips:
            self.rule_list.addItem(f"IP: {ip}")
        for port in blocked_ports:
            self.rule_list.addItem(f"Port: {port}")
        for proto in blocked_protocols:
            self.rule_list.addItem(f"Protocol: {proto}")

    def add_rule(self):
        ip = self.ip_input.text().strip()
        port = self.port_input.text().strip()
        proto = self.protocol_input.text().strip().upper()
        if ip:
            blocked_ips.add(ip)
        if port:
            blocked_ports.add(port)
        if proto:
            blocked_protocols.add(proto)
        save_firewall_rules()
        self.load_rules_into_list()
        self.ip_input.clear()
        self.port_input.clear()
        self.protocol_input.clear()

    def delete_rule(self):
        selected_item = self.rule_list.currentItem()
        if not selected_item:
            return
        rule_text = selected_item.text()
        if rule_text.startswith("IP: "):
            blocked_ips.discard(rule_text.split("IP: ")[1].strip())
        elif rule_text.startswith("Port: "):
            blocked_ports.discard(rule_text.split("Port: ")[1].strip())
        elif rule_text.startswith("Protocol: "):
            blocked_protocols.discard(rule_text.split("Protocol: ")[1].strip())
        save_firewall_rules()
        self.load_rules_into_list()

    def manual_save_rules(self):
        save_firewall_rules()
        QMessageBox.information(self, "Saved", "Firewall rules saved to JSON file.")


# Graph window to visualize protocol usage
class GraphViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Protocol Distribution")
        self.setGeometry(100, 100, 500, 400)
        layout = QVBoxLayout()

        self.figure = plt.figure()           # Matplotlib figure instance
        self.canvas = FigureCanvas(self.figure)

        refresh_btn = QPushButton("Refresh Graph")
        refresh_btn.clicked.connect(self.plot_graph)

        layout.addWidget(self.canvas)
        layout.addWidget(refresh_btn)
        self.setLayout(layout)
        self.plot_graph()

    def plot_graph(self):
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        proto_counts = Counter(proto for _, proto, _ in saved_packets)
        labels = list(proto_counts.keys())
        sizes = list(proto_counts.values())
        ax.pie(sizes, labels=labels, autopct='%1.1f%%')  # Draw pie chart
        ax.set_title("Protocol Distribution")
        self.canvas.draw()


# Main window that shows live packets and links to other tools
class LivePacketViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Live Packet Capture")
        self.setGeometry(100, 100, 700, 500)

        layout = QVBoxLayout()

        # Buttons for other tool windows
        control_layout = QHBoxLayout()
        self.open_graph_btn = QPushButton("Open Graph Viewer")
        self.open_graph_btn.clicked.connect(self.open_graph)
        self.open_firewall_btn = QPushButton("Open Firewall Controls")
        self.open_firewall_btn.clicked.connect(self.open_firewall)
        control_layout.addWidget(self.open_graph_btn)
        control_layout.addWidget(self.open_firewall_btn)
        layout.addLayout(control_layout)

        # Filters for protocol and port
        self.protocol_filter = QLineEdit()
        self.protocol_filter.setPlaceholderText("Filter by Protocol (e.g. TCP)")
        self.port_filter = QLineEdit()
        self.port_filter.setPlaceholderText("Filter by Port (e.g. 80)")
        self.apply_btn = QPushButton("Apply Filter")
        self.apply_btn.clicked.connect(self.apply_filter)

        # Filter inputs layout
        filter_layout = QHBoxLayout()
        filter_layout.addWidget(self.protocol_filter)
        filter_layout.addWidget(self.port_filter)
        filter_layout.addWidget(self.apply_btn)
        layout.addLayout(filter_layout)

        # Main packet output display
        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        layout.addWidget(self.output_area)

        # Save and clear view buttons
        button_layout = QHBoxLayout()
        self.save_btn = QPushButton("Save Filtered Packets")
        self.save_btn.clicked.connect(self.save_packets)
        self.clear_btn = QPushButton("Clear View")
        self.clear_btn.clicked.connect(self.clear_output)
        button_layout.addWidget(self.save_btn)
        button_layout.addWidget(self.clear_btn)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        # Timer to update GUI with incoming packets
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_output)
        self.timer.start(1000)  # Update every second

        # Placeholders for windows
        self.graph_window = None
        self.firewall_window = None

    def update_output(self):
        while not packet_queue.empty():
            line, proto, blocked = packet_queue.get()
            saved_packets.append((line, proto, blocked))
            if self.passes_filter(line, proto):
                self.append_output(line, blocked)

    def passes_filter(self, line, proto):
        proto_filter = self.protocol_filter.text().strip().upper()
        port_filter = self.port_filter.text().strip()
        if proto_filter and proto.upper() != proto_filter:
            return False
        if port_filter and f"port {port_filter}" not in line:
            return False
        return True

    def append_output(self, text, blocked):
        cursor = self.output_area.textCursor()
        cursor.movePosition(QTextCursor.End)
        fmt = QTextCharFormat()
        fmt.setForeground(QColor("red") if blocked else QColor("green"))  # Red for blocked, green for allowed
        cursor.insertText(text + "\n", fmt)
        self.output_area.setTextCursor(cursor)

    def clear_output(self):
        self.output_area.clear()

    def apply_filter(self):
        self.clear_output()
        for line, proto, blocked in saved_packets:
            if self.passes_filter(line, proto):
                self.append_output(line, blocked)

    def save_packets(self):
        filename, _ = QFileDialog.getSaveFileName(self, "Save Packets", "", "Text Files (*.txt)")
        if filename:
            with open(filename, "w") as f:
                f.write(self.output_area.toPlainText())

    def open_graph(self):
        if not self.graph_window:
            self.graph_window = GraphViewer()
        self.graph_window.show()

    def open_firewall(self):
        if not self.firewall_window:
            self.firewall_window = FirewallManager()
        self.firewall_window.show()


# Main application entry point
if __name__ == "__main__":
    app = QApplication(sys.argv)
    load_firewall_rules()  # Load saved firewall rules

    # Start sniffer thread so it doesn't block UI
    sniffer_thread = threading.Thread(target=start_sniffer, daemon=True)
    sniffer_thread.start()

    main_window = LivePacketViewer()  # Launch main viewer
    main_window.show()

    sys.exit(app.exec_())  # Start event loop
