# Import necessary system and OS modules for file handling and system functions
import sys
import os
import json
import threading
import queue
from datetime import datetime
from collections import Counter

# GUI components from PyQt5
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QTextEdit, QLineEdit, QFileDialog, QListWidget, QMessageBox
)
from PyQt5.QtGui import QTextCursor, QTextCharFormat, QColor
from PyQt5.QtCore import QTimer

# Network packet sniffing with Scapy
from scapy.all import sniff, IP, TCP, UDP, ICMP

# Matplotlib for plotting
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

# Pandas for saving packet data into Excel
import pandas as pd

# Global variables
packet_queue = queue.Queue()           # Queue for thread-safe packet communication
saved_packets = []                     # Stores all sniffed packets
blocked_ips = set()                    # Set of blocked IP addresses
blocked_ports = set()                  # Set of blocked ports
blocked_protocols = set()              # Set of blocked protocols
FIREWALL_RULES_FILE = "firewall_rules.json"  # File to persist firewall rules
alerts_enabled = True                  # Toggle flag for alerts


def load_firewall_rules():
    """Load firewall rules from the JSON file into memory."""
    global blocked_ips, blocked_ports, blocked_protocols
    if os.path.exists(FIREWALL_RULES_FILE):
        with open(FIREWALL_RULES_FILE, 'r') as f:
            data = json.load(f)
            blocked_ips = set(data.get("ips", []))
            blocked_ports = set(data.get("ports", []))
            blocked_protocols = set(data.get("protocols", []))
    else:
        save_firewall_rules()  # Create default rules file if not found


def save_firewall_rules():
    """Save current firewall rules to the JSON file."""
    rules = {
        "ips": list(blocked_ips),
        "ports": list(blocked_ports),
        "protocols": list(blocked_protocols)
    }
    with open(FIREWALL_RULES_FILE, "w") as f:
        json.dump(rules, f, indent=4)


def packet_callback(pkt):
    """Callback function for every captured packet from sniff."""
    if IP in pkt:
        # Extract packet details
        src_ip = pkt[IP].src
        dst_ip = pkt[IP].dst
        proto = pkt.proto
        proto_name = {1: "ICMP", 6: "TCP", 17: "UDP"}.get(proto, str(proto))
        dst_port = str(pkt[TCP].dport) if TCP in pkt else str(pkt[UDP].dport) if UDP in pkt else ""
        src_port = str(pkt[TCP].sport) if TCP in pkt else str(pkt[UDP].sport) if UDP in pkt else ""
        timestamp = datetime.now().strftime("%H:%M:%S")

        # Check if packet is blocked
        blocked = (src_ip in blocked_ips or dst_port in blocked_ports or proto_name in blocked_protocols)
        tag = "[Blocked]" if blocked else "[Allowed]"

        # Format display line
        line = f"{timestamp} {tag} {src_ip}:{src_port} -> {dst_ip}:{dst_port} | {proto_name} Packet on port {dst_port}"

        # Put line in queue and save to memory
        packet_queue.put((line, proto_name, blocked, src_ip, src_port, dst_ip, dst_port, proto_name, timestamp))


def start_sniffer():
    """Run the packet sniffer in a separate background thread."""
    sniff(prn=packet_callback, store=0)


class FirewallManager(QWidget):
    """GUI class to manage firewall rules (IP, Port, Protocol)."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Firewall Rule Manager")
        self.setGeometry(100, 100, 400, 350)
        layout = QVBoxLayout()

        # Input fields for rules
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("Block IP")
        self.port_input = QLineEdit()
        self.port_input.setPlaceholderText("Block Port")
        self.protocol_input = QLineEdit()
        self.protocol_input.setPlaceholderText("Block Protocol (TCP, UDP, ICMP)")

        # Buttons to manage rules
        add_btn = QPushButton("Add Rule")
        add_btn.clicked.connect(self.add_rule)
        delete_btn = QPushButton("Delete Selected Rule")
        delete_btn.clicked.connect(self.delete_rule)
        save_btn = QPushButton("Save Rules to JSON")
        save_btn.clicked.connect(save_firewall_rules)

        # Display list of rules
        self.rule_list = QListWidget()
        self.load_rules_into_list()

        # Add widgets to layout
        layout.addWidget(self.ip_input)
        layout.addWidget(self.port_input)
        layout.addWidget(self.protocol_input)
        layout.addWidget(add_btn)
        layout.addWidget(delete_btn)
        layout.addWidget(save_btn)
        layout.addWidget(self.rule_list)
        self.setLayout(layout)

    def load_rules_into_list(self):
        """Refresh list widget with current firewall rules."""
        self.rule_list.clear()
        for ip in blocked_ips:
            self.rule_list.addItem(f"IP: {ip}")
        for port in blocked_ports:
            self.rule_list.addItem(f"Port: {port}")
        for proto in blocked_protocols:
            self.rule_list.addItem(f"Protocol: {proto}")

    def add_rule(self):
        """Add inputted rule to memory and refresh GUI."""
        ip = self.ip_input.text().strip()
        port = self.port_input.text().strip()
        proto = self.protocol_input.text().strip().upper()
        if ip:
            blocked_ips.add(ip)
        if port:
            blocked_ports.add(port)
        if proto:
            blocked_protocols.add(proto)
        save_firewall_rules()
        self.load_rules_into_list()
        self.ip_input.clear()
        self.port_input.clear()
        self.protocol_input.clear()

    def delete_rule(self):
        """Remove selected rule from memory and GUI."""
        selected_item = self.rule_list.currentItem()
        if not selected_item:
            return
        rule_text = selected_item.text()
        if rule_text.startswith("IP: "):
            blocked_ips.discard(rule_text.split("IP: ")[1].strip())
        elif rule_text.startswith("Port: "):
            blocked_ports.discard(rule_text.split("Port: ")[1].strip())
        elif rule_text.startswith("Protocol: "):
            blocked_protocols.discard(rule_text.split("Protocol: ")[1].strip())
        save_firewall_rules()
        self.load_rules_into_list()


class GraphViewer(QWidget):
    """Graph viewer to show live protocol distribution as a pie chart."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Protocol Distribution")
        self.setGeometry(100, 100, 550, 450)

        layout = QVBoxLayout()
        self.figure = plt.figure()
        self.canvas = FigureCanvas(self.figure)

        # Graph control UI
        control_layout = QHBoxLayout()
        self.refresh_btn = QPushButton("Manual Refresh")
        self.refresh_btn.clicked.connect(self.plot_graph)
        self.auto_refresh_toggle = QPushButton("Stop Auto-Refresh")
        self.auto_refresh_toggle.setCheckable(True)
        self.auto_refresh_toggle.setChecked(True)
        self.auto_refresh_toggle.clicked.connect(self.toggle_auto_refresh)

        self.interval_selector = QLineEdit("5")
        control_layout.addWidget(QLabel("Interval (s):"))
        control_layout.addWidget(self.interval_selector)
        control_layout.addWidget(self.refresh_btn)
        control_layout.addWidget(self.auto_refresh_toggle)

        layout.addWidget(self.canvas)
        layout.addLayout(control_layout)
        self.setLayout(layout)

        # Auto-refresh timer
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.plot_graph)
        self.timer.start(5000)

        self.plot_graph()

    def plot_graph(self):
        """Plot pie chart of packet protocols."""
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        proto_counts = Counter(proto for _, proto, _, *_ in saved_packets)
        labels = list(proto_counts.keys())
        sizes = list(proto_counts.values())
        if sizes:
            ax.pie(sizes, labels=labels, autopct='%1.1f%%')
            ax.set_title("Protocol Distribution (Live)")
        else:
            ax.text(0.5, 0.5, "No Data Yet", ha='center', va='center')
        self.canvas.draw()

    def toggle_auto_refresh(self):
        """Toggle graph auto-refresh timer."""
        if self.auto_refresh_toggle.isChecked():
            self.timer.start()
            self.auto_refresh_toggle.setText("Stop Auto-Refresh")
        else:
            self.timer.stop()
            self.auto_refresh_toggle.setText("Start Auto-Refresh")


class LivePacketViewer(QWidget):
    """Main application window showing live packets and controls."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Live Packet Capture")
        self.setGeometry(100, 100, 800, 500)
        layout = QVBoxLayout()

        # Control buttons
        control_layout = QHBoxLayout()
        self.open_graph_btn = QPushButton("Open Graph Viewer")
        self.open_graph_btn.clicked.connect(self.open_graph)
        self.open_firewall_btn = QPushButton("Open Firewall Controls")
        self.open_firewall_btn.clicked.connect(self.open_firewall)
        self.alert_toggle_btn = QPushButton("Disable Alerts")
        self.alert_toggle_btn.clicked.connect(self.toggle_alerts)
        control_layout.addWidget(self.open_graph_btn)
        control_layout.addWidget(self.open_firewall_btn)
        control_layout.addWidget(self.alert_toggle_btn)
        layout.addLayout(control_layout)

        # Filter input
        self.protocol_filter = QLineEdit()
        self.protocol_filter.setPlaceholderText("Filter by Protocol (e.g. TCP)")
        self.port_filter = QLineEdit()
        self.port_filter.setPlaceholderText("Filter by Port (e.g. 80)")
        self.apply_btn = QPushButton("Apply Filter")
        self.apply_btn.clicked.connect(self.apply_filter)

        filter_layout = QHBoxLayout()
        filter_layout.addWidget(self.protocol_filter)
        filter_layout.addWidget(self.port_filter)
        filter_layout.addWidget(self.apply_btn)
        layout.addLayout(filter_layout)

        # Output text area
        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        layout.addWidget(self.output_area)

        # Save/Clear buttons
        button_layout = QHBoxLayout()
        self.save_btn = QPushButton("Save to Excel")
        self.save_btn.clicked.connect(self.save_packets)
        self.clear_btn = QPushButton("Clear View")
        self.clear_btn.clicked.connect(self.clear_output)
        button_layout.addWidget(self.save_btn)
        button_layout.addWidget(self.clear_btn)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        # Start updating the output every second
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_output)
        self.timer.start(1000)

        self.graph_window = None
        self.firewall_window = None

    def update_output(self):
        """Update GUI output and trigger alerts for blocked packets."""
        global alerts_enabled
        while not packet_queue.empty():
            packet = packet_queue.get()
            saved_packets.append(packet)
            line, proto, blocked, *_ = packet
            if self.passes_filter(line, proto):
                self.append_output(line, blocked)
            if alerts_enabled and blocked:
                QMessageBox.warning(self, "Blocked Packet Alert", line)

    def passes_filter(self, line, proto):
        """Check if packet matches protocol and port filter."""
        proto_filter = self.protocol_filter.text().strip().upper()
        port_filter = self.port_filter.text().strip()
        if proto_filter and proto.upper() != proto_filter:
            return False
        if port_filter and f"port {port_filter}" not in line:
            return False
        return True

    def append_output(self, text, blocked):
        """Add text to output area with colored formatting."""
        cursor = self.output_area.textCursor()
        cursor.movePosition(QTextCursor.End)
        fmt = QTextCharFormat()
        fmt.setForeground(QColor("red") if blocked else QColor("green"))
        cursor.insertText(text + "\n", fmt)
        self.output_area.setTextCursor(cursor)

    def clear_output(self):
        """Clear text area."""
        self.output_area.clear()

    def apply_filter(self):
        """Reapply filter to all saved packets."""
        self.clear_output()
        for packet in saved_packets:
            line, proto, blocked, *_ = packet
            if self.passes_filter(line, proto):
                self.append_output(line, blocked)

    def save_packets(self):
        """Save filtered packets to Excel using pandas."""
        filename, _ = QFileDialog.getSaveFileName(self, "Save Packets", "", "Excel Files (*.xlsx)")
        if filename:
            # Create DataFrame from saved packets
            df = pd.DataFrame(saved_packets, columns=["Line", "Protocol", "Blocked", "Src IP", "Src Port", "Dst IP", "Dst Port", "Proto", "Timestamp"])
            df.to_excel(filename, index=False)

    def toggle_alerts(self):
        """Enable or disable alert popups."""
        global alerts_enabled
        alerts_enabled = not alerts_enabled
        self.alert_toggle_btn.setText("Enable Alerts" if not alerts_enabled else "Disable Alerts")

    def open_graph(self):
        """Open the protocol distribution graph."""
        if not self.graph_window:
            self.graph_window = GraphViewer()
        self.graph_window.show()

    def open_firewall(self):
        """Open the firewall rule manager."""
        if not self.firewall_window:
            self.firewall_window = FirewallManager()
        self.firewall_window.show()


# Entry point
if __name__ == "__main__":
    app = QApplication(sys.argv)
    load_firewall_rules()
    sniffer_thread = threading.Thread(target=start_sniffer, daemon=True)
    sniffer_thread.start()
    main_window = LivePacketViewer()
    main_window.show()
    sys.exit(app.exec_())
